(defpackage :aoc2023-05
  (:use :cl :aoc2023-utils)
  (:export
   #:*lines*
   #:solve-1
   #:solve-2))

(in-package :aoc2023-05)

(defvar *lines* (input-file-lines 5))

;; 324'724'204
(defun solve-1 ()
  (multiple-value-bind (seeds tables)
      (parse-input *lines*)
    (let ((minimum nil))
      (dolist (seed seeds minimum)
        (let ((location (lookup-tables seed tables)))
          (when (or (null minimum) (< location minimum))
            (setf minimum location)))))))

;; 104'070'862
(defun solve-2 ()
  (multiple-value-bind (seed-pairs tables)
      (parse-input *lines*)
    (let ((mutex (system:make-mutex))
          (threads nil)
          (global-minimum nil))
      (flet ((main (start range)
               (let (minimum)
                 (dotimes (i range)
                   (let ((seed (+ start i)))
                     (let ((location (lookup-tables seed tables)))
                       (when (or (null minimum) (< location minimum))
                         (setf minimum location)))))
                 (system:with-mutex (mutex)
                   (when (or (null global-minimum) (< minimum global-minimum))
                     (setf global-minimum minimum))))))
        (do ((pairs seed-pairs (cddr pairs))
             (minimum 0))
            ((null pairs))
          (let ((start (car pairs))
                (range (cadr pairs)))
            (push (system:make-thread "worker" (lambda () (main start range)))
                  threads)))
        (dolist (thread threads)
          (system:join-thread thread))
        global-minimum))))

(defun parse-input (lines)
  (declare (type list lines))
  (flet ((make-table ()
           (make-array 0 :element-type 'list
                         :adjustable t :fill-pointer 0))
         (sort-table (table)
           (sort table #'< :key #'car)))
    (let ((seeds nil)
          (seed-to-soil (make-table))
          (soil-to-fertilizer (make-table))
          (fertilizer-to-water (make-table))
          (water-to-light (make-table))
          (light-to-temperature (make-table))
          (temperature-to-humidity (make-table))
          (humidity-to-location (make-table)))
      (let* ((line (car lines))
             (colon (position #\: line)))
        (setf seeds (mapcar #'parse-integer
                            (core:split-string line " " :start (+ colon 2)))))
      (let ((table nil))
        (dolist (line (cdr lines))
          (cond
            ((string= line "")
             nil)
            ((not (digit-char-p (char line 0)))
             (let ((table-name (subseq line 0 (position #\Space line))))
               (setf table (core:string-case table-name
                             ("seed-to-soil" seed-to-soil)
                             ("soil-to-fertilizer" soil-to-fertilizer)
                             ("fertilizer-to-water" fertilizer-to-water)
                             ("water-to-light" water-to-light)
                             ("light-to-temperature" light-to-temperature)
                             ("temperature-to-humidity" temperature-to-humidity)
                             ("humidity-to-location" humidity-to-location)))))
            (t
             (destructuring-bind (destination source range)
                 (mapcar #'parse-integer (core:split-string line " "))
               (vector-push-extend (list source destination range) table))))))
      (values seeds
              (list (sort-table seed-to-soil)
                    (sort-table soil-to-fertilizer)
                    (sort-table fertilizer-to-water)
                    (sort-table water-to-light)
                    (sort-table light-to-temperature)
                    (sort-table temperature-to-humidity)
                    (sort-table humidity-to-location))))))

(defun lookup-table (value table)
  (declare (type integer value)
           (type vector table))
  (do ((low 0)
       (high (1- (length table))))
      ((< high low)
       value)
    (let ((i (floor (+ low high) 2)))
      (destructuring-bind (source destination range)
          (aref table i)
        (cond
          ((< value source)
           (setf high (1- i)))
          ((> value (+ source range -1))
           (setf low (1+ i)))
          (t
           (return (+ destination (- value source)))))))))

(defun lookup-tables (value tables)
  (declare (type integer value)
           (type list tables))
  (dolist (table tables value)
    (setf value (lookup-table value table))))
